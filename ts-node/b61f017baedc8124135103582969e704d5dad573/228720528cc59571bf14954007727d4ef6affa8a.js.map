{"version":3,"file":"/home/admin/Programmi/resourceManagement/AISMfrontend/gulpfile.ts","sources":["/home/admin/Programmi/resourceManagement/AISMfrontend/gulpfile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as gulp from 'gulp';\r\nimport * as util from 'gulp-util';\r\nimport * as runSequence from 'run-sequence';\r\n\r\nimport Config from './tools/config';\r\nimport { loadTasks } from './tools/utils';\r\n\r\ngulp.src('node_modules/moment/moment.js')\r\n  .pipe(gulp.dest('./node_modules'));\r\n\r\nloadTasks(Config.SEED_TASKS_DIR);\r\nloadTasks(Config.PROJECT_TASKS_DIR);\r\n\r\n\r\n// --------------\r\n// Build dev.\r\ngulp.task('build.dev', (done: any) =>\r\n  runSequence(//'clean.dev',\r\n             // 'tslint',\r\n              // 'css-lint',\r\n              'build.fonts',\r\n              'build.assets.dev',\r\n              'build.html_css',\r\n              'build.js.dev',\r\n              'build.index.dev',\r\n              done));\r\n\r\n// --------------\r\n// Build dev watch.\r\ngulp.task('build.dev.watch', (done: any) =>\r\n  runSequence('build.dev',\r\n              'watch.dev',\r\n              done));\r\n\r\n// --------------\r\n// Build e2e.\r\ngulp.task('build.e2e', (done: any) =>\r\n  runSequence('clean.dev',\r\n              'tslint',\r\n              'build.assets.dev',\r\n              'build.js.e2e',\r\n              'build.index.dev',\r\n              done));\r\n\r\n// --------------\r\n// Build prod.\r\ngulp.task('build.prod', (done: any) =>\r\n  runSequence('clean.prod',\r\n              'tslint',\r\n              // 'css-lint',\r\n              'build.fonts',\r\n              'build.assets.prod',\r\n              'build.html_css',\r\n              'copy.prod',\r\n              'build.js.prod',\r\n              'build.bundles',\r\n              'build.bundles.app',\r\n              'minify.bundles',\r\n              'build.index.prod',\r\n              done));\r\n\r\n// --------------\r\n// Build prod.\r\ngulp.task('build.prod.exp', (done: any) =>\r\n  runSequence('clean.prod',\r\n              'tslint',\r\n              'css-lint',\r\n              'build.assets.prod',\r\n              'build.html_css',\r\n              'copy.prod',\r\n              'compile.ahead.prod',\r\n              'build.js.prod.exp',\r\n              'build.bundles',\r\n              'build.bundles.app.exp',\r\n              'minify.bundles',\r\n              'build.index.prod',\r\n              done));\r\n\r\n// --------------\r\n// Build test.\r\ngulp.task('build.test', (done: any) =>\r\n  runSequence('clean.once',\r\n              'tslint',\r\n              'build.fonts',\r\n              'build.assets.dev',\r\n              'build.html_css',\r\n              'build.js.dev',\r\n              'build.js.test',\r\n              'build.index.dev',\r\n              done));\r\n\r\n// --------------\r\n// Build test watch.\r\ngulp.task('test.watch', (done: any) =>\r\n  runSequence('build.test',\r\n              'watch.test',\r\n              'karma.watch',\r\n              done));\r\n\r\n// --------------\r\n// Build tools.\r\ngulp.task('build.tools', (done: any) =>\r\n  runSequence('clean.tools',\r\n              'build.js.tools',\r\n              done));\r\n\r\n// --------------\r\n// Docs\r\n// gulp.task('docs', (done: any) =>\r\n//   runSequence('build.docs',\r\n//               'serve.docs',\r\n//               done));\r\n\r\n// --------------\r\n// Serve dev\r\ngulp.task('serve.dev', (done: any) =>\r\n  runSequence('build.dev',\r\n              'server.start',\r\n              'watch.dev',\r\n              done));\r\n\r\n// --------------\r\n// Serve e2e\r\ngulp.task('serve.e2e', (done: any) =>\r\n  runSequence('build.e2e',\r\n              'server.start',\r\n              'watch.e2e',\r\n              done));\r\n\r\n\r\n// --------------\r\n// Serve prod\r\ngulp.task('serve.prod', (done: any) =>\r\n  runSequence('build.prod',\r\n              'server.prod',\r\n              done));\r\n\r\n\r\n// --------------\r\n// Test.\r\ngulp.task('test', (done: any) =>\r\n  runSequence('build.test',\r\n              'karma.run',\r\n              done));\r\n\r\n// --------------\r\n// Clean dev/coverage that will only run once\r\n// this prevents karma watchers from being broken when directories are deleted\r\nlet firstRun = true;\r\ngulp.task('clean.once', (done: any) => {\r\n  if (firstRun) {\r\n    firstRun = false;\r\n    runSequence('clean.dev', 'clean.coverage', done);\r\n  } else {\r\n    util.log('Skipping clean on rebuild');\r\n    done();\r\n  }\r\n});\r\n"]}