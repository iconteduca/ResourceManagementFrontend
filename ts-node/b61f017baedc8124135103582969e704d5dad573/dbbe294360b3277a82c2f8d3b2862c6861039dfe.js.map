{"version":3,"file":"/home/admin/Programmi/resourceManagement/AISMfrontend/tools/utils/seed/tasks_tools.ts","sources":["/home/admin/Programmi/resourceManagement/AISMfrontend/tools/utils/seed/tasks_tools.ts"],"names":[],"mappings":";AAAA,mBAAmD,IAAI,CAAC,CAAA;AACxD,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAClC,IAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AACrC,qBAAqB,MAAM,CAAC,CAAA;AAC5B,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AAMnC,mBAA0B,IAAY;IACpC,IAAI,CAAC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,OAAO,CAAC,IAAI,EAAE,UAAA,QAAQ,IAAI,OAAA,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,EAA5B,CAA4B,CAAC,CAAC;AAC1D,CAAC;AAHe,iBAAS,YAGxB,CAAA;AAOD,sBAAsB,QAAgB,EAAE,IAAY;IAClD,IAAM,IAAI,GAAG,WAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAClC,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEhE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,IAAS;QAC5B,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;QAED,IAAM,iBAAiB,GAAG,IAAI,EAAE,CAAC;QACjC,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,iBAAiB,CAAC;QAC3B,CAAC;QAID,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC;AAOD,iBAAiB,IAAY,EAAE,EAA8B;IAC3D,EAAE,CAAC,CAAC,CAAC,eAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC;IACT,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,CAAC;IAEX,cAAc,IAAY;QACxB,IAAI,KAAK,GAAG,gBAAW,CAAC,IAAI,CAAC,CAAC;QAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YACzC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,OAAO,GAAG,WAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,cAAS,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtD,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBACzC,EAAE,CAAC,QAAQ,CAAC,CAAC;YACf,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { existsSync, lstatSync, readdirSync } from 'fs';\r\nimport * as gulp from 'gulp';\r\nimport * as util from 'gulp-util';\r\nimport * as isstream from 'isstream';\r\nimport { join } from 'path';\r\nimport * as tildify from 'tildify';\r\n\r\n/**\r\n * Loads the tasks within the given path.\r\n * @param {string} path - The path to load the tasks from.\r\n */\r\nexport function loadTasks(path: string): void {\r\n  util.log('Loading tasks folder', util.colors.yellow(path));\r\n  readDir(path, taskname => registerTask(taskname, path));\r\n}\r\n\r\n/**\r\n * Registers the task by the given taskname and path.\r\n * @param {string} taskname - The name of the task.\r\n * @param {string} path     - The path of the task.\r\n */\r\nfunction registerTask(taskname: string, path: string): void {\r\n  const TASK = join(path, taskname);\r\n  util.log('Registering task', util.colors.yellow(tildify(TASK)));\r\n\r\n  gulp.task(taskname, (done: any) => {\r\n    const task = require(TASK);\r\n    if (task.length > 0) {\r\n      return task(done);\r\n    }\r\n\r\n    const taskReturnedValue = task();\r\n    if (isstream(taskReturnedValue)) {\r\n      return taskReturnedValue;\r\n    }\r\n\r\n    // TODO: add promise handling if needed at some point.\r\n\r\n    done();\r\n  });\r\n}\r\n\r\n/**\r\n * Reads the files in the given root directory and executes the given callback per found file.\r\n * @param {string}   root - The root directory to read.\r\n * @param {function} cb   - The callback to execute per found file.\r\n */\r\nfunction readDir(root: string, cb: (taskname: string) => void) {\r\n  if (!existsSync(root)) {\r\n    return;\r\n  }\r\n\r\n  walk(root);\r\n\r\n  function walk(path: string) {\r\n    let files = readdirSync(path);\r\n    for (let i = 0; i < files.length; i += 1) {\r\n      let file = files[i];\r\n      let curPath = join(path, file);\r\n      if (lstatSync(curPath).isFile() && /\\.ts$/.test(file)) {\r\n        let taskname = file.replace(/\\.ts$/, '');\r\n        cb(taskname);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}