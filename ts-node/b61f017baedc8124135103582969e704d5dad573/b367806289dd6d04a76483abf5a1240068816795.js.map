{"version":3,"file":"/home/admin/Programmi/resourceManagement/AISMfrontend/tools/utils/seed/server.ts","sources":["/home/admin/Programmi/resourceManagement/AISMfrontend/tools/utils/seed/server.ts"],"names":[],"mappings":";AAAA,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,QAAQ,WAAM,8BAA8B,CAAC,CAAA;AACzD,IAAY,YAAY,WAAM,MAAM,CAAC,CAAA;AACrC,qBAAwB,MAAM,CAAC,CAAA;AAE/B,IAAY,cAAc,WAAM,qBAAqB,CAAC,CAAA;AACtD,uBAAmB,cAAc,CAAC,CAAA;AAKlC;IACE,cAAc,CAAC,MAAM,EAAE,CAAC;AAC1B,CAAC;AAFe,gBAAQ,WAEvB,CAAA;AAOD,0BAAiC,CAAK;IACpC,IAAI,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC;IACtB,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACnC,CAAC;AAHe,wBAAgB,mBAG/B,CAAA;AAKD;IACE,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;IAEvB,MAAM,CAAC,GAAG,CACR,gBAAM,CAAC,QAAQ,EACf,OAAO,CAAC,MAAM,CAAC,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,gBAAM,CAAC,SAAS,CAAC,CAAC,CACzD,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC,gBAAM,CAAC,SAAS,EAAE;QAC9B,OAAA,YAAY,CAAC,mBAAmB,GAAG,gBAAM,CAAC,SAAS,GAAG,gBAAM,CAAC,QAAQ,CAAC;IAAtE,CAAsE,CACvE,CAAC;AACJ,CAAC;AAXe,iBAAS,YAWxB,CAAA;AAKD;IACE,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;IACvB,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;IACrC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAE9B,MAAM,CAAC,GAAG,CACR,gBAAM,CAAC,QAAQ,EACf,OAAO,CAAC,MAAM,CAAC,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC,CACnD,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC,gBAAM,CAAC,aAAa,EAAE;QAClC,OAAA,YAAY,CAAC,mBAAmB,GAAG,gBAAM,CAAC,aAAa,GAAG,gBAAM,CAAC,QAAQ,CAAC;IAA1E,CAA0E,CAC3E,CAAC;AACJ,CAAC;AAbe,qBAAa,gBAa5B,CAAA;AAKD;IACE,IAAI,IAAI,GAAG,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,gBAAM,CAAC,SAAS,CAAC,CAAC;IACpD,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;IACvB,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;IACrC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAE9B,MAAM,CAAC,GAAG,CAAC,gBAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAElD,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,UAAI,EAAE,CAAC,CAAC,CAAC;IAE7C,MAAM,CAAC,MAAM,CAAC,gBAAM,CAAC,IAAI,EAAE;QACzB,OAAA,YAAY,CAAC,mBAAmB,GAAG,gBAAM,CAAC,IAAI,GAAG,gBAAM,CAAC,QAAQ,CAAC;IAAjE,CAAiE,CAClE,CAAC;AACJ,CAAC;AAbe,iBAAS,YAaxB,CAAA;AAAA,CAAC","sourcesContent":["import * as express from 'express';\r\nimport * as fallback from 'express-history-api-fallback';\r\nimport * as openResource from 'open';\r\nimport { resolve } from 'path';\r\n\r\nimport * as codeChangeTool from './code_change_tools';\r\nimport Config from '../../config';\r\n\r\n/**\r\n * Serves the Single Page Application. More specifically, calls the `listen` method, which itself launches BrowserSync.\r\n */\r\nexport function serveSPA() {\r\n  codeChangeTool.listen();\r\n}\r\n\r\n/**\r\n * This utility method is used to notify that a file change has happened and subsequently calls the `changed` method,\r\n * which itself initiates a BrowserSync reload.\r\n * @param {any} e - The file that has changed.\r\n */\r\nexport function notifyLiveReload(e:any) {\r\n  let fileName = e.path;\r\n  codeChangeTool.changed(fileName);\r\n}\r\n\r\n/**\r\n * Starts a new `express` server, serving the static documentation files.\r\n */\r\nexport function serveDocs() {\r\n  let server = express();\r\n\r\n  server.use(\r\n    Config.APP_BASE,\r\n    express.static(resolve(process.cwd(), Config.DOCS_DEST))\r\n  );\r\n\r\n  server.listen(Config.DOCS_PORT, () =>\r\n    openResource('http://localhost:' + Config.DOCS_PORT + Config.APP_BASE)\r\n  );\r\n}\r\n\r\n/**\r\n * Starts a new `express` server, serving the static unit test code coverage report.\r\n */\r\nexport function serveCoverage() {\r\n  let server = express();\r\n  let compression = require('compression');\r\n      server.use(compression());\r\n\r\n  server.use(\r\n    Config.APP_BASE,\r\n    express.static(resolve(process.cwd(), 'coverage'))\r\n  );\r\n\r\n  server.listen(Config.COVERAGE_PORT, () =>\r\n    openResource('http://localhost:' + Config.COVERAGE_PORT + Config.APP_BASE)\r\n  );\r\n}\r\n\r\n/**\r\n * Starts a new `express` server, serving the built files from `dist/prod`.\r\n */\r\nexport function serveProd() {\r\n  let root = resolve(process.cwd(), Config.PROD_DEST);\r\n  let server = express();\r\n  let compression = require('compression');\r\n      server.use(compression());\r\n\r\n  server.use(Config.APP_BASE, express.static(root));\r\n\r\n  server.use(fallback('index.html', { root }));\r\n\r\n  server.listen(Config.PORT, () =>\r\n    openResource('http://localhost:' + Config.PORT + Config.APP_BASE)\r\n  );\r\n};\r\n"]}